#!/usr/bin/env bash

## Functions/
usage() {
cat << EOF
SYNOPSIS

    gpm leverages the power of the go get command and the underlying version
    control systems used by it to set your Go dependencies to desired versions,
    thus allowing easily reproducible builds in your Go projects.

    A Godeps file in the root of your Go application is expected containing
    the import paths of your packages and a specific tag or commit hash
    from its version control system, an example Godeps file looks like this:

    $ cat Godeps
    # This is a comment
    github.com/nu7hatch/gotrail         v0.0.2
    github.com/replicon/fast-archiver   v1.02   #This is another comment!
    github.com/nu7hatch/gotrail         2eb79d1f03ab24bacbc32b15b75769880629a865

    gpm has a companion tool, called [gvp](https://github.com/pote/gvp) which
    provides vendoring functionalities, it alters your GOPATH so every project
    has its own isolated dependency directory, its usage is recommended.

USAGE
      $ gpm             # Same as 'install'.
      $ gpm install     # Parses the Godeps file, installs dependencies and sets
                        # them to the appropriate version.
      $ gpm version     # Outputs version information
      $ gpm help        # Prints this message
EOF
}

is_in_use() {
  [[ -e "$1/.git/index.lock" || -e "$1/.hg/store/lock"  || -e "$1/.bzr/checkout/lock" ]]
}

# Iterates over Godep file dependencies and sets
# the specified version on each of them.
set_dependencies() {
  local pids=()
  while read line; do
    local line=`echo $line | sed 's/#.*//;/^\s*$/d' || echo ""`
    [ ! "$line" ] && continue
    (
      line=($line)
      local package=${line[0]}

      echo ">> Getting package "$package""
      for ((i=0; i<5; i++)); do
        out=$(go get -d "$package" 2>&1 >/dev/null) && break
      done

      [[ $? != 0 ]] && echo "-- Failed to get "$package", error: " && echo "$out" && exit 1
      exit 0
    ) &
    pids=(${pids[@]-} $!)
  done < $1

  for pid in "${pids[@]-}"; do
      wait $pid
      local status=$?
      [[ $status -ne 0 ]] && exit $status
  done

  pids=()
  while read line; do
    local line=`echo $line | sed 's/#.*//;/^\s*$/d' || echo ""`
    [ ! "$line" ] && continue
    (
      line=($line)
      local package=${line[0]}
      local version=${line[1]}
      local options=${line[2]:-}

      if [[ "$OSTYPE" == "cygwin" || "$OSTYPE" == "msys" ]]
      then
        local install_path="${GOPATH%%;*}/src/${package%%/...}"
      else
        local install_path="${GOPATH%%:*}/src/${package%%/...}"
      fi

      cd $install_path
      is_in_use $install_path && wait

      if [[ -n "$options" ]]; then
          echo $options | sed -n 1'p' | tr ',' '\n' | while read option; do
              keyVal=(${option//=/ })
              case "${keyVal[0]}" in
                  git.remote)
                      local remote_url="${keyVal[1]}"
                      git remote add downstream "${remote_url}" &> /dev/null
                      git fetch downstream &> /dev/null
                      echo "added remote ${remote_url} to ${install_path}"
                      ;;
                  *)
                      # We'll deal with invalid options on the next pass
                      ;;
              esac
          done
      fi

      hg update     "$version" > /dev/null 2>&1 || \
      git checkout  "$version" > /dev/null 2>&1 || \
      bzr revert -r "$version" > /dev/null 2>&1 || \
      #svn has exit status of 0 when there is no .svn
      { [ -d .svn ] && svn update -r "$version" > /dev/null 2>&1; } || \
      { echo ">> Failed to set $package to version $version"; exit 1; }

      if [[ -n "$options" ]]; then
          echo $options | sed -n 1'p' | tr ',' '\n' | while read option; do
              keyVal=(${option//=/ })
              case "${keyVal[0]}" in
                  gopkg.in)
                      if [[ "$OSTYPE" == "cygwin" || "$OSTYPE" == "msys" ]]
                      then
                        local gopkg_path="${GOPATH%%;*}/src/gopkg.in/${keyVal[1]}"
                      else
                        local gopkg_path="${GOPATH%%:*}/src/gopkg.in/${keyVal[1]}"
                      fi
                      # make sure the destination's parent directory exists and remove the
                      # actual destiniation directory so it is not in the way for a move
                      # i.e. mkdir -p $GOPATH/src/gopkg.in
                      #      rm -rf $GOPATH/src/gopkg.in/mgo.v2
                      #      cp -r $GOPATH/github.com/go-mgo/mgo $GOPATH/src/gopkg.in/mgo.v2
                      mkdir -p "$(dirname "$gopkg_path")"
                      rm -rf $gopkg_path
                      cp -r $install_path $gopkg_path
                      echo "moved $install_path to $gopkg_path"
                      ;;
                  git.remote)
                      # Already handled
                      ;;
                  *)
                      echo "Unknown option ${keyVal[0]}"
                      exit 1
              esac
          done
      fi

      echo ">> Set $package to version $version"
    ) &
    pids=(${pids[@]-} $!)
  done < $1

  for pid in "${pids[@]-}"; do
      wait $pid
      local status=$?
      [[ $status -ne 0 ]] && exit $status
  done

  echo ">> All Done"
}
## /Functions

## Command Line Parsing
case "${1:-"install"}" in
  "version")
    echo ">> gpm v1.0-MMS"
    ;;
  "install")
    deps_file="${2:-"Godeps"}"
    [[ -f "$deps_file" ]] || (echo ">> $deps_file file does not exist." && exit 1)
    (which go > /dev/null) ||
      ( echo ">> Go is currently not installed or in your PATH" && exit 1)
    set_dependencies $deps_file
    ;;
  "help")
    usage
    ;;
  *)
    ## Support for Plugins: if command is unknown search for a gpm-command executable.
    if command -v "gpm-$1" > /dev/null
    then
      plugin=$1 &&
      shift     &&
      gpm-$plugin $@ &&
      exit
    else
      usage && exit 1
    fi
    ;;
esac
